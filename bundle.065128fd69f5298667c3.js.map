{"version":3,"sources":["webpack:///bundle.065128fd69f5298667c3.js","webpack:///webpack/bootstrap 0166e168430376e1f9a3","webpack:///./src/index.js","webpack:///./src/Filters.js","webpack:///./src/index.html"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","preventDefault","event","window","clearActive","tar","oUl","getElementsByClassName","classList","remove","dropHandler","oFile","dataTransfer","files","oReader","FileReader","test","type","this","add","onload","console","log","oImg","Image","iWid","width","iHei","height","oCanvas","oMat","oCtx","drawImage","oFliter","_Filters2","default","src","result","readAsDataURL","applyPresetFliter","target","srcElement","tagName","toLocaleLowerCase","filterName","getAttribute","putImageData","applyMat","aInputs","getElementsByTagName","mat","val","len","length","value","Number","isNaN","push","conv","checkInput","replace","postInput","keyCode","apply","_Filters","obj","$","id","document","getElementById","oDropper","oBtn","getContext","addEventListener","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","props","descriptor","writable","key","protoProps","staticProps","Filters","img","canvas","createElement","ctx","x","y","w","h","getImageData","imgData","data","r","g","b","v","threshold","arguments","undefined","Math","abs","deta","gaussBlur","radius","sigma","order","a","PI","gaussMat","Array","gaussSum","exp","imgGrey","greyScale","imgInvert","invert","copyImageData","imgBlur","dataBlur","v1","v2","k","j","divisor","outputImg","createImageData","outData","floor","z","convSum","matIndex","rowIndex","colIndex"],"mappings":"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","file":"bundle.065128fd69f5298667c3.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n__webpack_require__(1);\n\nvar _Filters = __webpack_require__(2);\n\nvar _Filters2 = _interopRequireDefault(_Filters);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n__webpack_require__(3); //改变html，webpack-dev-server无法监听html，通过require方法通知\n\n\n//获取id\nvar $ = function $(id) {\n    return \"string\" === typeof id ? document.getElementById(id) : id;\n};\n//获取页面元素\nvar oCanvas = $('canvas'),\n    oDropper = $('wrapper'),\n    oUl = $('filter-li'),\n    oMat = $('mat-con'),\n    oBtn = $('apply-btn'),\n    oCtx = oCanvas.getContext && oCanvas.getContext('2d'),\n    oFliter = null;\n\n//绑定事件\noUl.addEventListener('click', applyPresetFliter, false);\n//oDropper在dragenter阶段需要取消默认行为\noDropper.addEventListener('dragenter', preventDefault, false);\noDropper.addEventListener('dragover', preventDefault, false);\noDropper.addEventListener('drop', dropHandler, false);\n\noMat.addEventListener('input', checkInput, false);\noMat.addEventListener('keyup', postInput, false);\noBtn.addEventListener('click', applyMat, false);\n\n//取消默认事件\nfunction preventDefault(event) {\n    var evt = event || window.event;\n    evt.preventDefault();\n}\nfunction clearActive() {\n    var tar = oUl.getElementsByClassName('active')[0];\n    if (tar) {\n        tar.classList.remove('active');\n    }\n}\n//drop放置事件处理函数\nfunction dropHandler(event) {\n    preventDefault(event);\n    //获取文件\n    var oFile = event.dataTransfer.files[0],\n        oReader = new FileReader();\n    //读取image\n    if (/image/.test(oFile.type)) {\n\n        //取消拖放提示\n        this.classList.add('active');\n        //读完文件\n        oReader.onload = function () {\n            console.log(oFile);\n            //创建image对象保存图片\n            var oImg = new Image();\n\n            oImg.onload = function () {\n                var iWid = this.width,\n                    iHei = this.height;\n                oCanvas.classList.remove('init');\n                oMat.classList.add('active');\n                clearActive();\n                oCanvas.width = iWid; //要注意使用canvasobj.width设置width，否则会图片会变形\n                oCanvas.height = iHei;\n                oCtx.drawImage(oImg, 0, 0, iWid, iHei);\n\n                //创建滤镜对象\n                oFliter = new _Filters2.default(this);\n            };\n            oImg.src = oReader.result;\n        };\n\n        oReader.readAsDataURL(oFile);\n    }\n}\n\n//应用预置滤镜\nfunction applyPresetFliter(event) {\n    var tar = event.target || event.srcElement;\n    //事件委托\n    if (tar.tagName.toLocaleLowerCase() === 'li') {\n\n        var filterName = tar.getAttribute('data-filter');\n\n        if (oFliter) {\n            clearActive();\n            oCtx.putImageData(oFliter[filterName](), 0, 0);\n            console.log('apply ' + filterName);\n            tar.classList.add('active');\n        }\n    }\n}\n\n//应用矩阵卷积\nfunction applyMat() {\n    var aInputs = oMat.getElementsByTagName('input'),\n        mat = [],\n        val = void 0;\n    for (var i = 0, len = aInputs.length; i < len; i++) {\n        val = aInputs[i].value - 0;\n        if (Number.isNaN(val)) {\n            val = 0;\n        }\n        aInputs[i].value = val;\n        mat.push(val);\n    }\n    clearActive();\n    oCtx.putImageData(oFliter.conv(mat), 0, 0);\n}\n\n//输入矩阵校验\nfunction checkInput(event) {\n    var tar = event.target || event.srcElement;\n    if (tar.tagName.toLocaleLowerCase() === 'input') {\n        tar.value = tar.value.replace(/[^\\+\\/\\-\\d\\.]*/g, '');\n    }\n}\n//enter提交\nfunction postInput(event) {\n    var tar = event.target || event.srcElement;\n    if (tar.tagName.toLocaleLowerCase() === 'input') {\n        if (event.keyCode === 13) {\n            applyMat.apply(this);\n        }\n    }\n}\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Created by 风稻人 on 2017/7/1.\r\n */\n\nvar Filters = function () {\n    //构造函数，每个实例保存原始图片数据\n    function Filters(img) {\n        _classCallCheck(this, Filters);\n\n        //创建一个canvas保存原始图像\n        this.canvas = document.createElement('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        this.img = img;\n        this.width = img.width;\n        this.height = img.height;\n        this.canvas.width = img.width;\n        this.canvas.height = img.height;\n        this.ctx.drawImage(this.img, 0, 0, this.width, this.height);\n    }\n    //获取图像数据\n\n\n    _createClass(Filters, [{\n        key: 'getImageData',\n        value: function getImageData(x, y, w, h) {\n            return this.ctx.getImageData(x || 0, y || 0, w || this.width, h || this.height);\n        }\n\n        //img图像数据通过canvas复制一份\n\n    }, {\n        key: 'copyImageData',\n        value: function copyImageData(imgData) {\n            imgData = imgData || this.getImageData();\n            var canvas = document.createElement('canvas'),\n                ctx = canvas.getContext('2d'),\n                w = imgData.width,\n                h = imgData.height;\n            canvas.width = w;\n            canvas.height = h;\n            ctx.putImageData(imgData, 0, 0);\n            return ctx.getImageData(0, 0, w, h);\n        }\n        //灰度\n\n    }, {\n        key: 'greyScale',\n        value: function greyScale(imgData) {\n            //图片像素数据\n            imgData = imgData || this.getImageData();\n            var data = imgData.data,\n                r = void 0,\n                g = void 0,\n                b = void 0,\n                v = void 0;\n            for (var i = 0, len = data.length; i < len; i += 4) {\n                r = data[i];g = data[i + 1];b = data[i + 2];\n                //加权取值\n                v = .299 * r + .587 * g + .114 * b;\n                data[i] = data[i + 1] = data[i + 2] = v;\n            }\n            return imgData;\n        }\n        //黑白效果，二值化\n\n    }, {\n        key: 'black',\n        value: function black(imgData) {\n            var threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n\n            imgData = imgData || this.getImageData();\n            var data = imgData.data,\n                v = void 0;\n            for (var i = 0, len = data.length; i < len; i += 4) {\n                //v = (.2 * data[i] + .7 * data[i + 1] + .1 * data[i + 2]) >= threshold ? 255 : 0;\n                v = .3 * data[i] + .6 * data[i + 1] + .1 * data[i + 2] >= threshold ? 255 : 0;\n                data[i] = data[i + 1] = data[i + 2] = v;\n            }\n            return imgData;\n        }\n        //连环画效果\n\n    }, {\n        key: 'comic',\n        value: function comic(imgData) {\n            imgData = imgData || this.getImageData();\n            var data = imgData.data,\n                r = void 0,\n                g = void 0,\n                b = void 0;\n            for (var i = 0, len = data.length; i < len; i += 4) {\n                r = data[i];g = data[i + 1];b = data[i + 2];\n                data[i] = Math.abs(g - b + g + r) * r / 256;\n                data[i + 1] = Math.abs(b - g + r + b) * r / 256;\n                data[i + 2] = Math.abs(b - g + r + b) * g / 256;\n            }\n            return imgData;\n        }\n        //怀旧风格\n\n    }, {\n        key: 'sepia',\n        value: function sepia(imgData) {\n            imgData = imgData || this.getImageData();\n            var data = imgData.data,\n                r = void 0,\n                g = void 0,\n                b = void 0;\n            for (var i = 0, len = data.length; i < len; i += 4) {\n                r = data[i];g = data[i + 1];b = data[i + 2];\n                data[i] = r * 0.393 + g * 0.769 + b * 0.189; // red\n                data[i + 1] = r * 0.349 + g * 0.686 + b * 0.168; // green\n                data[i + 2] = r * 0.272 + g * 0.534 + b * 0.131; // blue\n            }\n            return imgData;\n        }\n        //底片\n\n    }, {\n        key: 'invert',\n        value: function invert(imgData) {\n            imgData = imgData || this.getImageData();\n            var data = imgData.data;\n            for (var i = 0, len = data.length; i < len; i += 4) {\n                data[i] = 255 - data[i];\n                data[i + 1] = 255 - data[i + 1];\n                data[i + 2] = 255 - data[i + 2];\n            }\n            return imgData;\n        }\n        //加亮\n\n    }, {\n        key: 'brightness',\n        value: function brightness(imgData) {\n            var deta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n\n            imgData = imgData || this.getImageData();\n            var data = imgData.data;\n            for (var i = 0, len = data.length; i < len; i += 4) {\n                data[i] += deta;\n                data[i + 1] += deta;\n                data[i + 2] += deta;\n            }\n            return imgData;\n        }\n\n        //锐化\n\n    }, {\n        key: 'sharpen',\n        value: function sharpen(imgData) {\n            imgData = imgData || this.getImageData();\n            return this.conv([0, -1, 0, -1, 5, -1, 0, -1, 0], imgData);\n        }\n        //边缘检测\n\n    }, {\n        key: 'edgeDetection',\n        value: function edgeDetection(imgData) {\n            imgData = imgData || this.getImageData();\n            return this.conv([-1, -1, -1, -1, 8, -1, -1, -1, -1], this.gaussBlur(imgData));\n        }\n        //浮雕\n\n    }, {\n        key: 'embossing',\n        value: function embossing(imgData) {\n            imgData = imgData || this.getImageData();\n            return this.conv([1, 1, 1, 1, 0.7, -1, -1, -1, -1], imgData);\n        }\n\n        /**\r\n         * 高斯模糊\r\n         * 理论值遵循3σ原则，一般σ = radius/3，这里根据效果适当调大，在较小的阶数下也能有比较好的效果\r\n         *\r\n         * @param    {object}  imgData      要处理的imageData对象\r\n         * @param    {number}  radius       可选，卷积核半径，默认为1，\r\n         * @param    {number}  sigma        可选，卷积核的阶数，默认为radius\r\n         * @returns  {object}  outputImg    处理后的imageData对象\r\n         *\r\n         */\n\n    }, {\n        key: 'gaussBlur',\n        value: function gaussBlur(imgData) {\n            var radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n            var sigma = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : radius;\n\n            imgData = imgData || this.getImageData();\n            var order = radius * 2 + 1,\n                a = -1 / (2 * sigma * sigma),\n                b = -a / Math.PI,\n                gaussMat = new Array(order * order),\n                gaussSum = 0;\n            for (var x = -radius, i = 0; x <= radius; x++) {\n                for (var y = -radius; y <= radius; y++, i++) {\n                    gaussMat[i] = b * Math.exp(a * (x * x + y * y));\n                    gaussSum += gaussMat[i];\n                }\n            }\n            return this.conv(gaussMat, imgData, order, gaussSum);\n        }\n        //素描\n\n    }, {\n        key: 'sketch',\n        value: function sketch(imgData) {\n            imgData = imgData || this.getImageData();\n            var imgGrey = this.greyScale(imgData),\n                //灰度去色\n            imgInvert = this.invert(this.copyImageData(imgGrey)),\n                //复制一份反向imgInvert\n            imgBlur = this.gaussBlur(imgInvert),\n                //对imgInvert进行高斯模糊\n            data = imgGrey.data,\n                dataBlur = imgBlur.data,\n                v1 = void 0,\n                v2 = void 0,\n                v = void 0,\n                k = void 0;\n            //颜色减淡\n            for (var i = 0, len = data.length; i < len; i += 4) {\n                for (var j = 0; j < 3; j++) {\n                    k = i + j;\n                    v1 = data[k];v2 = dataBlur[k];\n                    v = v1 + v1 * v2 / (255 - v2);\n                    v = v > 255 ? 255 : v;\n                    data[k] = v;\n                }\n            }\n            return imgGrey;\n        }\n\n        /**\r\n         * 卷积核应用\r\n         *\r\n         * @param    {array}   mat          卷积矩阵，一维数组表示\r\n         * @param    {object}  imgData      要处理的imageData对象\r\n         * @param    {number}  divisor      可选，对卷积后数值归一化系数，默认为1，\r\n         * @param    {number}  order        可选，卷积核的阶数，默认为3\r\n         * @returns  {object}  outputImg    处理后的imageData对象\r\n         *\r\n         */\n\n    }, {\n        key: 'conv',\n        value: function conv(mat, imgData) {\n            var order = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n            var divisor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n\n            imgData = imgData || this.getImageData();\n            var data = imgData.data,\n                w = this.width,\n                h = this.height,\n                outputImg = this.ctx.createImageData(w, h),\n                outData = outputImg.data,\n                radius = Math.floor(order / 2);\n\n            //先遍历图片像素(x, y)\n            for (var y = 0; y < h; y++) {\n                for (var x = 0; x < w; x++) {\n                    //遍历r,g,b三通道，做一样的处理\n                    for (var z = 0; z < 3; z++) {\n                        //中心点像素(x, y)在data中的索引\n                        var i = (y * w + x) * 4 + z;\n\n                        //边界处理使用最简单的方法，即不做处理\n                        if (x < radius || y < radius || x >= w - radius || y >= h - radius) {\n                            outData[i] = data[i];\n                        }\n                        //非边界处矩阵卷积\n                        else {\n                                //卷积和\n                                var convSum = 0,\n                                    matIndex = 0;\n                                //遍历矩阵行\n                                for (var m = -radius; m <= radius; m++) {\n                                    //矩阵列 (x-m,y)\n                                    var rowIndex = i + w * 4 * m;\n\n                                    for (var n = -radius; n <= radius; n++) {\n                                        //(x-m, y-n)\n                                        var colIndex = rowIndex + n * 4;\n                                        convSum += mat[matIndex] * data[colIndex];\n                                        matIndex++;\n                                    }\n                                }\n                                outData[i] = convSum / divisor;\n                            }\n                    }\n                    // 设置透明度\n                    outData[(y * w + x) * 4 + 3] = 255;\n                }\n            }\n            return outputImg;\n        }\n    }]);\n\n    return Filters;\n}();\n\nexports.default = Filters;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<!DOCTYPE html>\\r\\n<html>\\r\\n<head>\\r\\n    <meta charset=\\\"UTF-8\\\">\\r\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\r\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\\\">\\r\\n    <title>Canvas Images Processing</title>\\r\\n</head>\\r\\n<body>\\r\\n<header>\\r\\n    <div class=\\\"container\\\">\\r\\n        <h1>基于canvas的图像处理</h1>\\r\\n        <p>像素级操作，Web也能玩转图片&nbsp;&nbsp;&nbsp; @Ytime</p>\\r\\n    </div>\\r\\n</header>\\r\\n<!--预置滤镜-->\\r\\n<nav class=\\\"preset\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <ul id=\\\"filter-li\\\" class=\\\"clear\\\">\\r\\n            <li data-filter=\\\"getImageData\\\">原图</li>\\r\\n            <li data-filter=\\\"greyScale\\\">灰度</li>\\r\\n            <li data-filter=\\\"black\\\">黑白</li>\\r\\n            <li data-filter=\\\"comic\\\">连环画</li>\\r\\n            <li data-filter=\\\"sepia\\\">怀旧</li>\\r\\n            <li data-filter=\\\"invert\\\">底片</li>\\r\\n            <li data-filter=\\\"brightness\\\">加亮</li>\\r\\n            <li data-filter=\\\"sharpen\\\">锐化</li>\\r\\n            <li data-filter=\\\"edgeDetection\\\">边缘检测</li>\\r\\n            <li data-filter=\\\"embossing\\\">浮雕</li>\\r\\n            <li data-filter=\\\"gaussBlur\\\">模糊</li>\\r\\n            <li data-filter=\\\"sketch\\\">素描</li>\\r\\n\\r\\n        </ul>\\r\\n    </div>\\r\\n</nav>\\r\\n\\r\\n<!--图片显示-->\\r\\n<div id=\\\"wrapper\\\" class=\\\"container content\\\" title=\\\"拖拽新图片替换\\\" droppable=\\\"true\\\">\\r\\n    <canvas id=\\\"canvas\\\" class=\\\"init\\\">您的浏览器不支持canvas，请更换现代浏览器</canvas>\\r\\n    <div class=\\\"tip\\\">\\r\\n        <span>把图片拖拽到此处</span>\\r\\n    </div>\\r\\n    <!--卷积矩阵-->\\r\\n    <div class=\\\"mat-con\\\" id=\\\"mat-con\\\">\\r\\n        <div>\\r\\n            <input type=\\\"text\\\" value=\\\"0\\\"><input type=\\\"text\\\" value=\\\"0\\\"><input type=\\\"text\\\" value=\\\"0\\\"><input type=\\\"text\\\" value=\\\"0\\\"><input type=\\\"text\\\" value=\\\"1\\\"><input type=\\\"text\\\" value=\\\"0\\\"><input type=\\\"text\\\" value=\\\"0\\\"><input type=\\\"text\\\" value=\\\"0\\\"><input type=\\\"text\\\" value=\\\"0\\\">\\r\\n        </div>\\r\\n        <div><button id=\\\"apply-btn\\\" title=\\\"矩阵卷积滤波\\\">应用</button></div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n</body>\\r\\n</html>\"\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// bundle.065128fd69f5298667c3.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0166e168430376e1f9a3","\r\nrequire(\"./index.html\");  //改变html，webpack-dev-server无法监听html，通过require方法通知\r\nimport \"./style/style.css\";\r\nimport Filters from './Filters.js';\r\n\r\n//获取id\r\nconst $ = function(id){\r\n    return \"string\" === typeof id ? document.getElementById(id) : id;\r\n}\r\n//获取页面元素\r\nlet oCanvas = $('canvas'),\r\n    oDropper = $('wrapper'),\r\n    oUl = $('filter-li'),\r\n    oMat = $('mat-con'),\r\n    oBtn = $('apply-btn'),\r\n    oCtx = oCanvas.getContext && oCanvas.getContext('2d'),\r\n    oFliter = null;\r\n\r\n//绑定事件\r\noUl.addEventListener('click', applyPresetFliter, false);\r\n//oDropper在dragenter阶段需要取消默认行为\r\noDropper.addEventListener('dragenter',preventDefault,false);\r\noDropper.addEventListener('dragover',preventDefault,false);\r\noDropper.addEventListener('drop', dropHandler, false);\r\n\r\noMat.addEventListener('input', checkInput, false);\r\noMat.addEventListener('keyup', postInput, false);\r\noBtn.addEventListener('click', applyMat, false);\r\n\r\n\r\n//取消默认事件\r\nfunction preventDefault(event){\r\n    let evt = event || window.event;\r\n    evt.preventDefault();\r\n}\r\nfunction clearActive(){\r\n    let tar = oUl.getElementsByClassName('active')[0];\r\n    if(tar){\r\n        tar.classList.remove('active');\r\n    }\r\n}\r\n//drop放置事件处理函数\r\nfunction dropHandler(event){\r\n    preventDefault(event);\r\n    //获取文件\r\n    let oFile = event.dataTransfer.files[0],\r\n        oReader = new FileReader();\r\n    //读取image\r\n    if(/image/.test(oFile.type)){\r\n\r\n        //取消拖放提示\r\n        this.classList.add('active');\r\n        //读完文件\r\n        oReader.onload = function(){\r\n            console.log(oFile)\r\n            //创建image对象保存图片\r\n            let oImg = new Image();\r\n\r\n            oImg.onload = function(){\r\n                let iWid = this.width,\r\n                    iHei = this.height;\r\n                oCanvas.classList.remove('init');\r\n                oMat.classList.add('active');\r\n                clearActive();\r\n                oCanvas.width = iWid;  //要注意使用canvasobj.width设置width，否则会图片会变形\r\n                oCanvas.height = iHei;\r\n                oCtx.drawImage(oImg, 0, 0, iWid, iHei);\r\n\r\n                //创建滤镜对象\r\n                oFliter = new Filters(this);\r\n\r\n            }\r\n            oImg.src = oReader.result;\r\n        }\r\n\r\n        oReader.readAsDataURL(oFile);\r\n\r\n    }\r\n\r\n}\r\n\r\n//应用预置滤镜\r\nfunction applyPresetFliter(event){\r\n    let tar = event.target || event.srcElement;\r\n    //事件委托\r\n    if (tar.tagName.toLocaleLowerCase() === 'li'){\r\n\r\n        let filterName = tar.getAttribute('data-filter');\r\n\r\n        if (oFliter){\r\n            clearActive()\r\n            oCtx.putImageData(oFliter[filterName](), 0, 0);\r\n            console.log('apply ' + filterName);\r\n            tar.classList.add('active');\r\n        }\r\n    }\r\n}\r\n\r\n//应用矩阵卷积\r\nfunction applyMat(){\r\n    let aInputs = oMat.getElementsByTagName('input'),\r\n        mat = [],\r\n        val;\r\n    for (let i = 0, len = aInputs.length; i < len; i++){\r\n        val = aInputs[i].value - 0;\r\n        if (Number.isNaN(val)){\r\n            val = 0;\r\n        }\r\n        aInputs[i].value = val;\r\n        mat.push(val);\r\n    }\r\n    clearActive();\r\n    oCtx.putImageData(oFliter.conv(mat), 0, 0);\r\n}\r\n\r\n//输入矩阵校验\r\nfunction checkInput(event){\r\n    let tar = event.target || event.srcElement;\r\n    if (tar.tagName.toLocaleLowerCase() === 'input'){\r\n        tar.value = tar.value.replace(/[^\\+\\/\\-\\d\\.]*/g,'');\r\n    }\r\n}\r\n//enter提交\r\nfunction postInput(event){\r\n    let tar = event.target || event.srcElement;\r\n    if (tar.tagName.toLocaleLowerCase() === 'input'){\r\n        if(event.keyCode === 13){\r\n            applyMat.apply(this);\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/**\r\n * Created by 风稻人 on 2017/7/1.\r\n */\r\n\r\nexport default class Filters {\r\n    //构造函数，每个实例保存原始图片数据\r\n    constructor(img){\r\n        //创建一个canvas保存原始图像\r\n        this.canvas = document.createElement('canvas');\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.img = img;\r\n        this.width = img.width;\r\n        this.height = img.height;\r\n        this.canvas.width = img.width;\r\n        this.canvas.height = img.height;\r\n        this.ctx.drawImage(this.img, 0, 0, this.width, this.height);\r\n    }\r\n    //获取图像数据\r\n    getImageData(x, y, w, h){\r\n        return this.ctx.getImageData(x || 0, y || 0, w || this.width, h || this.height);\r\n    }\r\n\r\n    //img图像数据通过canvas复制一份\r\n    copyImageData(imgData){\r\n        imgData = imgData || this.getImageData();\r\n        let canvas =  document.createElement('canvas'),\r\n            ctx = canvas.getContext('2d'),\r\n            w = imgData.width,\r\n            h = imgData.height;\r\n        canvas.width = w;\r\n        canvas.height = h;\r\n        ctx.putImageData(imgData, 0, 0);\r\n        return ctx.getImageData(0, 0, w, h);\r\n    }\r\n    //灰度\r\n    greyScale(imgData) {\r\n        //图片像素数据\r\n        imgData = imgData || this.getImageData();\r\n        let data = imgData.data,\r\n            r, g, b, v;\r\n        for(let i = 0, len = data.length; i < len; i += 4){\r\n            r = data[i]; g = data[i + 1]; b = data[i + 2];\r\n            //加权取值\r\n            v = .299 * r + .587 * g + .114 * b;\r\n            data[i] = data[i + 1] = data[i + 2] = v;\r\n        }\r\n        return imgData;\r\n    }\r\n    //黑白效果，二值化\r\n    black(imgData, threshold = 100){\r\n        imgData = imgData || this.getImageData();\r\n        let data = imgData.data,\r\n            v;\r\n        for(let i = 0, len = data.length; i < len; i += 4){\r\n            //v = (.2 * data[i] + .7 * data[i + 1] + .1 * data[i + 2]) >= threshold ? 255 : 0;\r\n            v = (.3 * data[i] + .6 * data[i + 1] + .1 * data[i + 2]) >= threshold ? 255 : 0;\r\n            data[i] = data[i + 1] = data[i + 2] = v;\r\n        }\r\n        return imgData;\r\n    }\r\n    //连环画效果\r\n    comic(imgData){\r\n        imgData = imgData || this.getImageData();\r\n        let data = imgData.data,\r\n            r, g, b;\r\n        for(let i = 0, len = data.length; i < len; i += 4){\r\n            r = data[i]; g = data[i + 1]; b = data[i + 2];\r\n            data[i]     = Math.abs((g - b + g + r)) * r /256;\r\n            data[i + 1] = Math.abs((b - g + r + b)) * r /256;\r\n            data[i + 2] = Math.abs((b - g + r + b)) * g /256;\r\n        }\r\n        return imgData;\r\n    }\r\n    //怀旧风格\r\n    sepia(imgData){\r\n        imgData = imgData || this.getImageData();\r\n        let data = imgData.data,\r\n            r, g, b;\r\n        for(let i = 0, len = data.length; i < len; i += 4){\r\n            r = data[i]; g = data[i + 1]; b = data[i + 2];\r\n            data[i]     = (r * 0.393) + (g * 0.769) + (b * 0.189); // red\r\n            data[i + 1] = (r * 0.349) + (g * 0.686) + (b * 0.168); // green\r\n            data[i + 2] = (r * 0.272) + (g * 0.534) + (b * 0.131); // blue\r\n        }\r\n        return imgData;\r\n    }\r\n    //底片\r\n    invert(imgData){\r\n        imgData = imgData || this.getImageData();\r\n        let data = imgData.data\r\n        for(let i = 0, len = data.length; i < len; i += 4){\r\n            data[i]     = 255 - data[i];\r\n            data[i + 1] = 255 - data[i + 1];\r\n            data[i + 2] = 255 - data[i + 2];\r\n        }\r\n        return imgData;\r\n    }\r\n    //加亮\r\n    brightness(imgData, deta = 50){\r\n        imgData = imgData || this.getImageData();\r\n        let data = imgData.data;\r\n        for(let i = 0, len = data.length; i < len; i += 4){\r\n            data[i]     += deta;\r\n            data[i + 1] += deta;\r\n            data[i + 2] += deta;\r\n        }\r\n        return imgData;\r\n    }\r\n\r\n    //锐化\r\n    sharpen(imgData){\r\n        imgData = imgData || this.getImageData();\r\n        return this.conv([0, -1, 0, -1, 5, -1, 0, -1, 0], imgData);\r\n    }\r\n    //边缘检测\r\n    edgeDetection(imgData){\r\n        imgData = imgData || this.getImageData();\r\n        return this.conv([-1, -1, -1, -1, 8, -1, -1, -1, -1], this.gaussBlur(imgData));\r\n    }\r\n    //浮雕\r\n    embossing(imgData){\r\n        imgData = imgData || this.getImageData();\r\n        return this.conv([1, 1, 1, 1, 0.7, -1, -1, -1, -1], imgData);\r\n    }\r\n\r\n    /**\r\n     * 高斯模糊\r\n     * 理论值遵循3σ原则，一般σ = radius/3，这里根据效果适当调大，在较小的阶数下也能有比较好的效果\r\n     *\r\n     * @param    {object}  imgData      要处理的imageData对象\r\n     * @param    {number}  radius       可选，卷积核半径，默认为1，\r\n     * @param    {number}  sigma        可选，卷积核的阶数，默认为radius\r\n     * @returns  {object}  outputImg    处理后的imageData对象\r\n     *\r\n     */\r\n    gaussBlur(imgData, radius = 1, sigma = radius){\r\n        imgData = imgData || this.getImageData();\r\n        let order = radius*2 + 1,\r\n            a = -1 / (2 * sigma * sigma),\r\n            b = -a / Math.PI,\r\n            gaussMat = new Array(order * order),\r\n            gaussSum = 0;\r\n        for (let x = -radius, i = 0; x <= radius; x++){\r\n            for (let y = -radius; y <= radius; y++, i++){\r\n                gaussMat[i] = b * Math.exp(a * (x*x + y*y));\r\n                gaussSum += gaussMat[i];\r\n            }\r\n        }\r\n        return this.conv(gaussMat, imgData, order, gaussSum);\r\n    }\r\n    //素描\r\n    sketch(imgData){\r\n        imgData = imgData || this.getImageData();\r\n        let imgGrey = this.greyScale(imgData),  //灰度去色\r\n            imgInvert = this.invert(this.copyImageData(imgGrey)),  //复制一份反向imgInvert\r\n            imgBlur = this.gaussBlur(imgInvert), //对imgInvert进行高斯模糊\r\n            data = imgGrey.data,\r\n            dataBlur = imgBlur.data,\r\n            v1, v2, v, k;\r\n        //颜色减淡\r\n        for(let i = 0, len = data.length; i < len; i += 4){\r\n            for (let j = 0; j < 3; j++){\r\n                k = i + j;\r\n                v1 = data[k]; v2 = dataBlur[k];\r\n                v = v1 + v1 * v2 / (255 - v2);\r\n                v = v > 255 ? 255 : v;\r\n                data[k] = v;\r\n            }\r\n\r\n        }\r\n        return imgGrey;\r\n    }\r\n\r\n\r\n    /**\r\n     * 卷积核应用\r\n     *\r\n     * @param    {array}   mat          卷积矩阵，一维数组表示\r\n     * @param    {object}  imgData      要处理的imageData对象\r\n     * @param    {number}  divisor      可选，对卷积后数值归一化系数，默认为1，\r\n     * @param    {number}  order        可选，卷积核的阶数，默认为3\r\n     * @returns  {object}  outputImg    处理后的imageData对象\r\n     *\r\n     */\r\n    conv(mat, imgData, order = 3, divisor = 1){\r\n\r\n        imgData = imgData || this.getImageData();\r\n        let data = imgData.data,\r\n            w = this.width,\r\n            h = this.height,\r\n            outputImg = this.ctx.createImageData(w, h),\r\n            outData = outputImg.data,\r\n            radius = Math.floor(order  / 2);\r\n\r\n        //先遍历图片像素(x, y)\r\n        for(let y = 0; y < h; y++){\r\n            for(let x = 0; x < w; x++){\r\n                //遍历r,g,b三通道，做一样的处理\r\n                for(let z = 0; z < 3; z++){\r\n                    //中心点像素(x, y)在data中的索引\r\n                    let i = (y * w + x) * 4 + z;\r\n\r\n                    //边界处理使用最简单的方法，即不做处理\r\n                    if (x < radius || y < radius || x >= w - radius || y >= h - radius){\r\n                        outData[i] = data[i];\r\n                    }\r\n                    //非边界处矩阵卷积\r\n                    else{\r\n                        //卷积和\r\n                        let convSum = 0,\r\n                            matIndex = 0;\r\n                        //遍历矩阵行\r\n                        for (let m = -radius; m <= radius; m++ ){\r\n                            //矩阵列 (x-m,y)\r\n                            let rowIndex = i + w*4*m;\r\n\r\n                            for (let n = -radius; n <= radius; n++){\r\n                                //(x-m, y-n)\r\n                                let colIndex = rowIndex + n*4;\r\n                                convSum += mat[matIndex] * data[colIndex];\r\n                                matIndex++;\r\n\r\n                            }\r\n                        }\r\n                        outData[i] = convSum / divisor;\r\n                    }\r\n                }\r\n                // 设置透明度\r\n                outData[(y * w + x) * 4 + 3] = 255;\r\n            }\r\n        }\r\n        return outputImg;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Filters.js","module.exports = \"<!DOCTYPE html>\\r\\n<html>\\r\\n<head>\\r\\n    <meta charset=\\\"UTF-8\\\">\\r\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\r\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\\\">\\r\\n    <title>Canvas Images Processing</title>\\r\\n</head>\\r\\n<body>\\r\\n<header>\\r\\n    <div class=\\\"container\\\">\\r\\n        <h1>基于canvas的图像处理</h1>\\r\\n        <p>像素级操作，Web也能玩转图片&nbsp;&nbsp;&nbsp; @Ytime</p>\\r\\n    </div>\\r\\n</header>\\r\\n<!--预置滤镜-->\\r\\n<nav class=\\\"preset\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <ul id=\\\"filter-li\\\" class=\\\"clear\\\">\\r\\n            <li data-filter=\\\"getImageData\\\">原图</li>\\r\\n            <li data-filter=\\\"greyScale\\\">灰度</li>\\r\\n            <li data-filter=\\\"black\\\">黑白</li>\\r\\n            <li data-filter=\\\"comic\\\">连环画</li>\\r\\n            <li data-filter=\\\"sepia\\\">怀旧</li>\\r\\n            <li data-filter=\\\"invert\\\">底片</li>\\r\\n            <li data-filter=\\\"brightness\\\">加亮</li>\\r\\n            <li data-filter=\\\"sharpen\\\">锐化</li>\\r\\n            <li data-filter=\\\"edgeDetection\\\">边缘检测</li>\\r\\n            <li data-filter=\\\"embossing\\\">浮雕</li>\\r\\n            <li data-filter=\\\"gaussBlur\\\">模糊</li>\\r\\n            <li data-filter=\\\"sketch\\\">素描</li>\\r\\n\\r\\n        </ul>\\r\\n    </div>\\r\\n</nav>\\r\\n\\r\\n<!--图片显示-->\\r\\n<div id=\\\"wrapper\\\" class=\\\"container content\\\" title=\\\"拖拽新图片替换\\\" droppable=\\\"true\\\">\\r\\n    <canvas id=\\\"canvas\\\" class=\\\"init\\\">您的浏览器不支持canvas，请更换现代浏览器</canvas>\\r\\n    <div class=\\\"tip\\\">\\r\\n        <span>把图片拖拽到此处</span>\\r\\n    </div>\\r\\n    <!--卷积矩阵-->\\r\\n    <div class=\\\"mat-con\\\" id=\\\"mat-con\\\">\\r\\n        <div>\\r\\n            <input type=\\\"text\\\" value=\\\"0\\\"><input type=\\\"text\\\" value=\\\"0\\\"><input type=\\\"text\\\" value=\\\"0\\\"><input type=\\\"text\\\" value=\\\"0\\\"><input type=\\\"text\\\" value=\\\"1\\\"><input type=\\\"text\\\" value=\\\"0\\\"><input type=\\\"text\\\" value=\\\"0\\\"><input type=\\\"text\\\" value=\\\"0\\\"><input type=\\\"text\\\" value=\\\"0\\\">\\r\\n        </div>\\r\\n        <div><button id=\\\"apply-btn\\\" title=\\\"矩阵卷积滤波\\\">应用</button></div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n</body>\\r\\n</html>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.html\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}